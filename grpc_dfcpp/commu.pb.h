// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_commu_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_commu_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_commu_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_commu_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_commu_2eproto;
namespace commu {
class index;
struct indexDefaultTypeInternal;
extern indexDefaultTypeInternal _index_default_instance_;
class reply;
struct replyDefaultTypeInternal;
extern replyDefaultTypeInternal _reply_default_instance_;
class threemess;
struct threemessDefaultTypeInternal;
extern threemessDefaultTypeInternal _threemess_default_instance_;
}  // namespace commu
PROTOBUF_NAMESPACE_OPEN
template <>
::commu::index* Arena::CreateMaybeMessage<::commu::index>(Arena*);
template <>
::commu::reply* Arena::CreateMaybeMessage<::commu::reply>(Arena*);
template <>
::commu::threemess* Arena::CreateMaybeMessage<::commu::threemess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace commu {

// ===================================================================


// -------------------------------------------------------------------

class index final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commu.index) */ {
 public:
  inline index() : index(nullptr) {}
  ~index() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR index(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  index(const index& from);
  index(index&& from) noexcept
    : index() {
    *this = ::std::move(from);
  }

  inline index& operator=(const index& from) {
    CopyFrom(from);
    return *this;
  }
  inline index& operator=(index&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const index& default_instance() {
    return *internal_default_instance();
  }
  static inline const index* internal_default_instance() {
    return reinterpret_cast<const index*>(
               &_index_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(index& a, index& b) {
    a.Swap(&b);
  }
  inline void Swap(index* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(index* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  index* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<index>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const index& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const index& from) {
    index::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(index* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "commu.index";
  }
  protected:
  explicit index(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // repeated int32 _index = 1;
  int _index_size() const;
  private:
  int _internal__index_size() const;

  public:
  void clear__index() ;
  ::int32_t _index(int index) const;
  void set__index(int index, ::int32_t value);
  void add__index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable__index();

  private:
  ::int32_t _internal__index(int index) const;
  void _internal_add__index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal__index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable__index();

  public:
  // @@protoc_insertion_point(class_scope:commu.index)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> _index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize __index_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_commu_2eproto;
};// -------------------------------------------------------------------

class threemess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commu.threemess) */ {
 public:
  inline threemess() : threemess(nullptr) {}
  ~threemess() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR threemess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  threemess(const threemess& from);
  threemess(threemess&& from) noexcept
    : threemess() {
    *this = ::std::move(from);
  }

  inline threemess& operator=(const threemess& from) {
    CopyFrom(from);
    return *this;
  }
  inline threemess& operator=(threemess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const threemess& default_instance() {
    return *internal_default_instance();
  }
  static inline const threemess* internal_default_instance() {
    return reinterpret_cast<const threemess*>(
               &_threemess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(threemess& a, threemess& b) {
    a.Swap(&b);
  }
  inline void Swap(threemess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(threemess* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  threemess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<threemess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const threemess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const threemess& from) {
    threemess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(threemess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "commu.threemess";
  }
  protected:
  explicit threemess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfvIndexFieldNumber = 1,
    kValueFieldNumber = 2,
    kTaskIndexFieldNumber = 3,
    kDfvIndexBackwardFieldNumber = 4,
    kPartitionFieldNumber = 5,
    kExecutorNumberFieldNumber = 6,
  };
  // repeated int32 dfv_index = 1;
  int dfv_index_size() const;
  private:
  int _internal_dfv_index_size() const;

  public:
  void clear_dfv_index() ;
  ::int32_t dfv_index(int index) const;
  void set_dfv_index(int index, ::int32_t value);
  void add_dfv_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& dfv_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_dfv_index();

  private:
  ::int32_t _internal_dfv_index(int index) const;
  void _internal_add_dfv_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_dfv_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_dfv_index();

  public:
  // repeated int32 value = 2;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::int32_t value(int index) const;
  void set_value(int index, ::int32_t value);
  void add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_value();

  private:
  ::int32_t _internal_value(int index) const;
  void _internal_add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_value();

  public:
  // repeated int32 task_index = 3;
  int task_index_size() const;
  private:
  int _internal_task_index_size() const;

  public:
  void clear_task_index() ;
  ::int32_t task_index(int index) const;
  void set_task_index(int index, ::int32_t value);
  void add_task_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& task_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_task_index();

  private:
  ::int32_t _internal_task_index(int index) const;
  void _internal_add_task_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_task_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_task_index();

  public:
  // repeated int32 dfv_index_backward = 4;
  int dfv_index_backward_size() const;
  private:
  int _internal_dfv_index_backward_size() const;

  public:
  void clear_dfv_index_backward() ;
  ::int32_t dfv_index_backward(int index) const;
  void set_dfv_index_backward(int index, ::int32_t value);
  void add_dfv_index_backward(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& dfv_index_backward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_dfv_index_backward();

  private:
  ::int32_t _internal_dfv_index_backward(int index) const;
  void _internal_add_dfv_index_backward(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_dfv_index_backward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_dfv_index_backward();

  public:
  // int32 partition = 5;
  void clear_partition() ;
  ::int32_t partition() const;
  void set_partition(::int32_t value);

  private:
  ::int32_t _internal_partition() const;
  void _internal_set_partition(::int32_t value);

  public:
  // int32 executor_number = 6;
  void clear_executor_number() ;
  ::int32_t executor_number() const;
  void set_executor_number(::int32_t value);

  private:
  ::int32_t _internal_executor_number() const;
  void _internal_set_executor_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:commu.threemess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> dfv_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _dfv_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _value_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> task_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _task_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> dfv_index_backward_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _dfv_index_backward_cached_byte_size_;
    ::int32_t partition_;
    ::int32_t executor_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_commu_2eproto;
};// -------------------------------------------------------------------

class reply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commu.reply) */ {
 public:
  inline reply() : reply(nullptr) {}
  ~reply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR reply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  reply(const reply& from);
  reply(reply&& from) noexcept
    : reply() {
    *this = ::std::move(from);
  }

  inline reply& operator=(const reply& from) {
    CopyFrom(from);
    return *this;
  }
  inline reply& operator=(reply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const reply& default_instance() {
    return *internal_default_instance();
  }
  static inline const reply* internal_default_instance() {
    return reinterpret_cast<const reply*>(
               &_reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(reply& a, reply& b) {
    a.Swap(&b);
  }
  inline void Swap(reply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(reply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  reply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<reply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const reply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const reply& from) {
    reply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(reply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "commu.reply";
  }
  protected:
  explicit reply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfvIndexFieldNumber = 2,
    kValueFieldNumber = 3,
    kRetFieldNumber = 1,
    kPartitionFieldNumber = 4,
    kExecutorNumberFieldNumber = 5,
  };
  // repeated int32 dfv_index = 2;
  int dfv_index_size() const;
  private:
  int _internal_dfv_index_size() const;

  public:
  void clear_dfv_index() ;
  ::int32_t dfv_index(int index) const;
  void set_dfv_index(int index, ::int32_t value);
  void add_dfv_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& dfv_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_dfv_index();

  private:
  ::int32_t _internal_dfv_index(int index) const;
  void _internal_add_dfv_index(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_dfv_index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_dfv_index();

  public:
  // repeated int32 value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  ::int32_t value(int index) const;
  void set_value(int index, ::int32_t value);
  void add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_value();

  private:
  ::int32_t _internal_value(int index) const;
  void _internal_add_value(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_value();

  public:
  // int32 ret = 1;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // int32 partition = 4;
  void clear_partition() ;
  ::int32_t partition() const;
  void set_partition(::int32_t value);

  private:
  ::int32_t _internal_partition() const;
  void _internal_set_partition(::int32_t value);

  public:
  // int32 executor_number = 5;
  void clear_executor_number() ;
  ::int32_t executor_number() const;
  void set_executor_number(::int32_t value);

  private:
  ::int32_t _internal_executor_number() const;
  void _internal_set_executor_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:commu.reply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> dfv_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _dfv_index_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _value_cached_byte_size_;
    ::int32_t ret_;
    ::int32_t partition_;
    ::int32_t executor_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_commu_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// index

// repeated int32 _index = 1;
inline int index::_internal__index_size() const {
  return _impl_._index_.size();
}
inline int index::_index_size() const {
  return _internal__index_size();
}
inline void index::clear__index() {
  _internal_mutable__index()->Clear();
}
inline ::int32_t index::_index(int index) const {
  // @@protoc_insertion_point(field_get:commu.index._index)
  return _internal__index(index);
}
inline void index::set__index(int index, ::int32_t value) {
  _internal_mutable__index()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.index._index)
}
inline void index::add__index(::int32_t value) {
  _internal_add__index(value);
  // @@protoc_insertion_point(field_add:commu.index._index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& index::_index() const {
  // @@protoc_insertion_point(field_list:commu.index._index)
  return _internal__index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* index::mutable__index() {
  // @@protoc_insertion_point(field_mutable_list:commu.index._index)
  return _internal_mutable__index();
}

inline ::int32_t index::_internal__index(int index) const {
  return _internal__index().Get(index);
}
inline void index::_internal_add__index(::int32_t value) {
  _internal_mutable__index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& index::_internal__index() const {
  return _impl_._index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* index::_internal_mutable__index() {
  return &_impl_._index_;
}

// -------------------------------------------------------------------

// threemess

// repeated int32 dfv_index = 1;
inline int threemess::_internal_dfv_index_size() const {
  return _impl_.dfv_index_.size();
}
inline int threemess::dfv_index_size() const {
  return _internal_dfv_index_size();
}
inline void threemess::clear_dfv_index() {
  _internal_mutable_dfv_index()->Clear();
}
inline ::int32_t threemess::dfv_index(int index) const {
  // @@protoc_insertion_point(field_get:commu.threemess.dfv_index)
  return _internal_dfv_index(index);
}
inline void threemess::set_dfv_index(int index, ::int32_t value) {
  _internal_mutable_dfv_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.threemess.dfv_index)
}
inline void threemess::add_dfv_index(::int32_t value) {
  _internal_add_dfv_index(value);
  // @@protoc_insertion_point(field_add:commu.threemess.dfv_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::dfv_index() const {
  // @@protoc_insertion_point(field_list:commu.threemess.dfv_index)
  return _internal_dfv_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::mutable_dfv_index() {
  // @@protoc_insertion_point(field_mutable_list:commu.threemess.dfv_index)
  return _internal_mutable_dfv_index();
}

inline ::int32_t threemess::_internal_dfv_index(int index) const {
  return _internal_dfv_index().Get(index);
}
inline void threemess::_internal_add_dfv_index(::int32_t value) {
  _internal_mutable_dfv_index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::_internal_dfv_index() const {
  return _impl_.dfv_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::_internal_mutable_dfv_index() {
  return &_impl_.dfv_index_;
}

// repeated int32 value = 2;
inline int threemess::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int threemess::value_size() const {
  return _internal_value_size();
}
inline void threemess::clear_value() {
  _internal_mutable_value()->Clear();
}
inline ::int32_t threemess::value(int index) const {
  // @@protoc_insertion_point(field_get:commu.threemess.value)
  return _internal_value(index);
}
inline void threemess::set_value(int index, ::int32_t value) {
  _internal_mutable_value()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.threemess.value)
}
inline void threemess::add_value(::int32_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:commu.threemess.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::value() const {
  // @@protoc_insertion_point(field_list:commu.threemess.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:commu.threemess.value)
  return _internal_mutable_value();
}

inline ::int32_t threemess::_internal_value(int index) const {
  return _internal_value().Get(index);
}
inline void threemess::_internal_add_value(::int32_t value) {
  _internal_mutable_value()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::_internal_value() const {
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::_internal_mutable_value() {
  return &_impl_.value_;
}

// repeated int32 task_index = 3;
inline int threemess::_internal_task_index_size() const {
  return _impl_.task_index_.size();
}
inline int threemess::task_index_size() const {
  return _internal_task_index_size();
}
inline void threemess::clear_task_index() {
  _internal_mutable_task_index()->Clear();
}
inline ::int32_t threemess::task_index(int index) const {
  // @@protoc_insertion_point(field_get:commu.threemess.task_index)
  return _internal_task_index(index);
}
inline void threemess::set_task_index(int index, ::int32_t value) {
  _internal_mutable_task_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.threemess.task_index)
}
inline void threemess::add_task_index(::int32_t value) {
  _internal_add_task_index(value);
  // @@protoc_insertion_point(field_add:commu.threemess.task_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::task_index() const {
  // @@protoc_insertion_point(field_list:commu.threemess.task_index)
  return _internal_task_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::mutable_task_index() {
  // @@protoc_insertion_point(field_mutable_list:commu.threemess.task_index)
  return _internal_mutable_task_index();
}

inline ::int32_t threemess::_internal_task_index(int index) const {
  return _internal_task_index().Get(index);
}
inline void threemess::_internal_add_task_index(::int32_t value) {
  _internal_mutable_task_index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::_internal_task_index() const {
  return _impl_.task_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::_internal_mutable_task_index() {
  return &_impl_.task_index_;
}

// repeated int32 dfv_index_backward = 4;
inline int threemess::_internal_dfv_index_backward_size() const {
  return _impl_.dfv_index_backward_.size();
}
inline int threemess::dfv_index_backward_size() const {
  return _internal_dfv_index_backward_size();
}
inline void threemess::clear_dfv_index_backward() {
  _internal_mutable_dfv_index_backward()->Clear();
}
inline ::int32_t threemess::dfv_index_backward(int index) const {
  // @@protoc_insertion_point(field_get:commu.threemess.dfv_index_backward)
  return _internal_dfv_index_backward(index);
}
inline void threemess::set_dfv_index_backward(int index, ::int32_t value) {
  _internal_mutable_dfv_index_backward()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.threemess.dfv_index_backward)
}
inline void threemess::add_dfv_index_backward(::int32_t value) {
  _internal_add_dfv_index_backward(value);
  // @@protoc_insertion_point(field_add:commu.threemess.dfv_index_backward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::dfv_index_backward() const {
  // @@protoc_insertion_point(field_list:commu.threemess.dfv_index_backward)
  return _internal_dfv_index_backward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::mutable_dfv_index_backward() {
  // @@protoc_insertion_point(field_mutable_list:commu.threemess.dfv_index_backward)
  return _internal_mutable_dfv_index_backward();
}

inline ::int32_t threemess::_internal_dfv_index_backward(int index) const {
  return _internal_dfv_index_backward().Get(index);
}
inline void threemess::_internal_add_dfv_index_backward(::int32_t value) {
  _internal_mutable_dfv_index_backward()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& threemess::_internal_dfv_index_backward() const {
  return _impl_.dfv_index_backward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* threemess::_internal_mutable_dfv_index_backward() {
  return &_impl_.dfv_index_backward_;
}

// int32 partition = 5;
inline void threemess::clear_partition() {
  _impl_.partition_ = 0;
}
inline ::int32_t threemess::partition() const {
  // @@protoc_insertion_point(field_get:commu.threemess.partition)
  return _internal_partition();
}
inline void threemess::set_partition(::int32_t value) {
  _internal_set_partition(value);
  // @@protoc_insertion_point(field_set:commu.threemess.partition)
}
inline ::int32_t threemess::_internal_partition() const {
  return _impl_.partition_;
}
inline void threemess::_internal_set_partition(::int32_t value) {
  ;
  _impl_.partition_ = value;
}

// int32 executor_number = 6;
inline void threemess::clear_executor_number() {
  _impl_.executor_number_ = 0;
}
inline ::int32_t threemess::executor_number() const {
  // @@protoc_insertion_point(field_get:commu.threemess.executor_number)
  return _internal_executor_number();
}
inline void threemess::set_executor_number(::int32_t value) {
  _internal_set_executor_number(value);
  // @@protoc_insertion_point(field_set:commu.threemess.executor_number)
}
inline ::int32_t threemess::_internal_executor_number() const {
  return _impl_.executor_number_;
}
inline void threemess::_internal_set_executor_number(::int32_t value) {
  ;
  _impl_.executor_number_ = value;
}

// -------------------------------------------------------------------

// reply

// int32 ret = 1;
inline void reply::clear_ret() {
  _impl_.ret_ = 0;
}
inline ::int32_t reply::ret() const {
  // @@protoc_insertion_point(field_get:commu.reply.ret)
  return _internal_ret();
}
inline void reply::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:commu.reply.ret)
}
inline ::int32_t reply::_internal_ret() const {
  return _impl_.ret_;
}
inline void reply::_internal_set_ret(::int32_t value) {
  ;
  _impl_.ret_ = value;
}

// repeated int32 dfv_index = 2;
inline int reply::_internal_dfv_index_size() const {
  return _impl_.dfv_index_.size();
}
inline int reply::dfv_index_size() const {
  return _internal_dfv_index_size();
}
inline void reply::clear_dfv_index() {
  _internal_mutable_dfv_index()->Clear();
}
inline ::int32_t reply::dfv_index(int index) const {
  // @@protoc_insertion_point(field_get:commu.reply.dfv_index)
  return _internal_dfv_index(index);
}
inline void reply::set_dfv_index(int index, ::int32_t value) {
  _internal_mutable_dfv_index()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.reply.dfv_index)
}
inline void reply::add_dfv_index(::int32_t value) {
  _internal_add_dfv_index(value);
  // @@protoc_insertion_point(field_add:commu.reply.dfv_index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& reply::dfv_index() const {
  // @@protoc_insertion_point(field_list:commu.reply.dfv_index)
  return _internal_dfv_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* reply::mutable_dfv_index() {
  // @@protoc_insertion_point(field_mutable_list:commu.reply.dfv_index)
  return _internal_mutable_dfv_index();
}

inline ::int32_t reply::_internal_dfv_index(int index) const {
  return _internal_dfv_index().Get(index);
}
inline void reply::_internal_add_dfv_index(::int32_t value) {
  _internal_mutable_dfv_index()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& reply::_internal_dfv_index() const {
  return _impl_.dfv_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* reply::_internal_mutable_dfv_index() {
  return &_impl_.dfv_index_;
}

// repeated int32 value = 3;
inline int reply::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int reply::value_size() const {
  return _internal_value_size();
}
inline void reply::clear_value() {
  _internal_mutable_value()->Clear();
}
inline ::int32_t reply::value(int index) const {
  // @@protoc_insertion_point(field_get:commu.reply.value)
  return _internal_value(index);
}
inline void reply::set_value(int index, ::int32_t value) {
  _internal_mutable_value()->Set(index, value);
  // @@protoc_insertion_point(field_set:commu.reply.value)
}
inline void reply::add_value(::int32_t value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:commu.reply.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& reply::value() const {
  // @@protoc_insertion_point(field_list:commu.reply.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* reply::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:commu.reply.value)
  return _internal_mutable_value();
}

inline ::int32_t reply::_internal_value(int index) const {
  return _internal_value().Get(index);
}
inline void reply::_internal_add_value(::int32_t value) {
  _internal_mutable_value()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& reply::_internal_value() const {
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* reply::_internal_mutable_value() {
  return &_impl_.value_;
}

// int32 partition = 4;
inline void reply::clear_partition() {
  _impl_.partition_ = 0;
}
inline ::int32_t reply::partition() const {
  // @@protoc_insertion_point(field_get:commu.reply.partition)
  return _internal_partition();
}
inline void reply::set_partition(::int32_t value) {
  _internal_set_partition(value);
  // @@protoc_insertion_point(field_set:commu.reply.partition)
}
inline ::int32_t reply::_internal_partition() const {
  return _impl_.partition_;
}
inline void reply::_internal_set_partition(::int32_t value) {
  ;
  _impl_.partition_ = value;
}

// int32 executor_number = 5;
inline void reply::clear_executor_number() {
  _impl_.executor_number_ = 0;
}
inline ::int32_t reply::executor_number() const {
  // @@protoc_insertion_point(field_get:commu.reply.executor_number)
  return _internal_executor_number();
}
inline void reply::set_executor_number(::int32_t value) {
  _internal_set_executor_number(value);
  // @@protoc_insertion_point(field_set:commu.reply.executor_number)
}
inline ::int32_t reply::_internal_executor_number() const {
  return _impl_.executor_number_;
}
inline void reply::_internal_set_executor_number(::int32_t value) {
  ;
  _impl_.executor_number_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace commu


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_commu_2eproto_2epb_2eh
